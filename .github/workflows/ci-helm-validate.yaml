name: Helm CI

on:
  pull_request:
    paths:
      - 'charts/**'
      - 'apps/**'
      - 'envs/**'
      - '.github/workflows/ci-helm-validate.yaml'
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read

concurrency:
  group: helm-ci-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

env:
  # 스키마 검증에 사용할 대상 Kubernetes 버전(클러스터와 맞추면 베스트)
  K8S_VERSION: "1.29.0"
  # 네임스페이스는 렌더 시 확인용. (실제 배포는 ArgoCD가 CreateNamespace 처리)
  DEV_NS: "dryrun-dev"
  PROD_NS: "dryrun-prod"

jobs:
  helm-validate:
    name: Lint & Render & Validate (Helm)
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        chart: [mlflow, airflow, fastapi]
        env: [dev, prod]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Install kubeconform
        run: |
          curl -sSL -o /tmp/kubeconform.tar.gz https://github.com/yannh/kubeconform/releases/download/v0.6.7/kubeconform-linux-amd64.tar.gz
          tar -xzf /tmp/kubeconform.tar.gz -C /usr/local/bin kubeconform
          kubeconform -version

      - name: Install yq (for debug utilities)
        run: |
          sudo curl -L https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -o /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Helm Lint
        working-directory: charts/${{ matrix.chart }}
        run: |
          echo "==> helm lint charts/${{ matrix.chart }}"
          helm lint .

      - name: Render Helm template (${{ matrix.chart }} / ${{ matrix.env }})
        run: |
          RELEASE="${{ matrix.chart }}-${{ matrix.env }}"
          CHART_PATH="charts/${{ matrix.chart }}"
          VALUES_FILE="${CHART_PATH}/values-${{ matrix.env }}.yaml"
          NS="${{ matrix.env == 'dev' && env.DEV_NS || env.PROD_NS }}"

          test -f "${VALUES_FILE}" || { echo "::error ::Missing values file: ${VALUES_FILE}"; exit 1; }

          mkdir -p ./rendered/${{ matrix.chart }}/${{ matrix.env }}
          OUT="./rendered/${{ matrix.chart }}/${{ matrix.env }}/rendered.yaml"

          echo "==> helm template ${RELEASE} ${CHART_PATH} -f ${VALUES_FILE} --namespace ${NS}"
          helm template "${RELEASE}" "${CHART_PATH}" \
            -f "${VALUES_FILE}" \
            --namespace "${NS}" \
            > "${OUT}"

          # 빈 출력 방지 체크
          if [ ! -s "${OUT}" ]; then
            echo "::error ::Rendered manifest is empty for ${RELEASE}"
            exit 1
          fi

          echo "Rendered manifest saved to ${OUT}"
          echo "First 20 lines:"
          head -n 20 "${OUT}" || true

      - name: Validate manifests with kubeconform (${{ matrix.chart }} / ${{ matrix.env }})
        run: |
          MANIFEST="./rendered/${{ matrix.chart }}/${{ matrix.env }}/rendered.yaml"
          echo "==> kubeconform -strict -ignore-missing-schemas -kubernetes-version ${K8S_VERSION}"
          kubeconform \
            -strict \
            -ignore-missing-schemas \
            -kubernetes-version "${K8S_VERSION}" \
            -summary \
            "${MANIFEST}"

      - name: YAML Lint (envs/apps)
        if: matrix.chart == 'mlflow' && matrix.env == 'dev'
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: |
            envs
            apps
            charts
          strict: true

      - name: Upload rendered manifests (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rendered-${{ matrix.chart }}-${{ matrix.env }}
          path: rendered/${{ matrix.chart }}/${{ matrix.env }}/rendered.yaml
          if-no-files-found: error
