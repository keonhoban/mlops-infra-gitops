apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: monitoring-dev
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true,PruneLast=true,ServerSideApply=true
spec:
  project: dev
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring-dev
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    chart: kube-prometheus-stack
    targetRevision: 65.5.0
    helm:
      skipCrds: true
      values: |
        global:
          imageRegistry: ""

        grafana:
          image:
            repository: grafana/grafana
            tag: "11.2.2-security-01"
          sidecar:
            image:
              repository: kiwigrid/k8s-sidecar
              tag: "1.28.0"
          admin:
            existingSecret: grafana-admin-secret-dev
            userKey: admin-user
            passwordKey: admin-password
          ingress:
            enabled: true
            ingressClassName: nginx
            hosts: [grafana-dev.local]
            path: /
            pathType: Prefix
            tls:
              - hosts: [grafana-dev.local]
                secretName: grafana-tls
          persistence:
            enabled: true
            type: pvc
            storageClassName: nfs-monitoring
            size: 10Gi

        alertmanager:
          alertmanagerSpec:
            configSecret: alertmanager-config-dev
            storage:
              volumeClaimTemplate:
                spec:
                  storageClassName: nfs-monitoring
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 50Gi
          ingress:
            enabled: true
            ingressClassName: nginx
            hosts: [alert-dev.local]
            path: /
            pathType: Prefix
            tls:
              - hosts: [alert-dev.local]
                secretName: alertmanager-tls

        # ✅ kubelet 메트릭 수집 활성화 (ServiceMonitor를 kube-system에 생성)
        kubelet:
          enabled: true
          serviceMonitor:
            enabled: true
            namespace: kube-system

        prometheus:
          ingress:
            enabled: true
            ingressClassName: nginx
            hosts: [prometheus-dev.local]
            path: /
            pathType: Prefix
            tls:
              - hosts: [prometheus-dev.local]
                secretName: prometheus-tls
          prometheusSpec:
            externalUrl: "https://prometheus-dev.local"

            # 오퍼레이터 기본값과 충돌 방지
            serviceMonitorSelectorNilUsesHelmValues: false
            podMonitorSelectorNilUsesHelmValues: false

            # env 라벨 기반 선택(네가 만든 ServiceMonitor만 긁음)
            serviceMonitorSelector:
              matchLabels:
                release: monitoring-dev
            podMonitorSelector:
              matchLabels:
                release: monitoring-dev
            ruleSelector:
              matchLabels:
                release: monitoring-dev

            # 네임스페이스 범위는 기본(빈 객체)로 유지
            serviceMonitorNamespaceSelector: {}
            podMonitorNamespaceSelector: {}
            ruleNamespaceSelector: {}

            # 드리프트 방지용 명시
            routePrefix: "/"

            storageSpec:
              volumeClaimTemplate:
                spec:
                  storageClassName: nfs-monitoring
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 50Gi
            retention: 15d
            retentionSize: 30GiB

        # kube-system 일부 컴포넌트 비활성화(로컬 클러스터에서 필요 없음)
        kubeEtcd:
          enabled: false
        kubeControllerManager:
          enabled: false
        kubeScheduler:
          enabled: false
        kubeProxy:
          enabled: false
        coreDns:
          enabled: false

        prometheus-node-exporter:
          enabled: true
          hostNetwork: false
          hostPID: false
          service:
            hostPort: false
            type: ClusterIP
            port: 9100
            targetPort: 9100
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
